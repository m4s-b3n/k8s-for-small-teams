name: Deploy

on:
  workflow_dispatch:

permissions: {}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: false
    environment:
      name: deploy
    env:
      ARM_USE_OIDC: true
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_keyvault_name: ${{ vars.KEYVAULT_NAME }}
      TF_VAR_keyvault_resource_group: ${{ vars.KEYVAULT_RESOURCE_GROUP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Deploy microk8s
        uses: infinite-automations/terraform-all-in-one@v1.2.0
        with:
          init-args: >-
            -backend-config='resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP }}'
            -backend-config='storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT }}'
            -backend-config='container_name=${{ vars.BACKEND_CONTAINER_NAME }}'
            -backend-config='key=k8s-for-small-teams/infra/terraform.tfstate'
          directory: "terraform"
          apply: true

  provision:
    name: Provision
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: deploy
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: Get Secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ vars.KEYVAULT_NAME }}
          secrets: >-
            k8s-for-small-teams-fqdn,
            k8s-for-small-teams-username,
            k8s-for-small-teams-key
        id: secrets
      - name: Write Secrets
        env:
          KEY: ${{ secrets.APP_KEY_RUNNER_CONFIGURATOR }}
        run: |
          yq eval -n '
          .additional_helm_charts.k8s-for-small-teams.helm_values.githubConfigSecret.github_app_id = "${{ secrets.APP_ID_RUNNER_CONFIGURATOR }}" |
          .additional_helm_charts.k8s-for-small-teams.helm_values.githubConfigSecret.github_app_installation_id = "${{ secrets.APP_INSTALLATION_ID_RUNNER_CONFIGURATOR }}" |
          .additional_helm_charts.k8s-for-small-teams.helm_values.githubConfigSecret.github_app_private_key = "${{ secrets.APP_KEY_RUNNER_CONFIGURATOR }}"
          ' > ansible/extra_vars.yml
      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        env:
          ANSIBLE_REMOTE_USER: ${{ steps.secrets.outputs.k8s-for-small-teams-username }}
        with:
          directory: ansible
          requirements: requirements.yaml
          playbook: microk8s.yaml
          inventory: |
            [all]
            ${{ steps.secrets.outputs.k8s-for-small-teams-fqdn }}
          key: ${{ steps.secrets.outputs.k8s-for-small-teams-key }}
          options: |
            --extra-vars "@extra_vars.yml"
            --verbose

  test:
    name: Test
    needs: provision
    uses: ./.github/workflows/test.yml
    with:
      environment: test

  deploy-k8s:
    name: Deploy Initial Resources
    needs: test
    permissions:
      contents: read
    uses: ./.github/workflows/deployk8s.yml
    with:
      environment: deploy
    secrets:
      APP_ID_RUNNER_CONFIGURATOR: ${{ secrets.APP_ID_RUNNER_CONFIGURATOR }}
      APP_INSTALLATION_ID_RUNNER_CONFIGURATOR: ${{ secrets.APP_INSTALLATION_ID_RUNNER_CONFIGURATOR }}
      APP_KEY_RUNNER_CONFIGURATOR: ${{ secrets.APP_KEY_RUNNER_CONFIGURATOR }}
