---
- name: Install microk8s and kubectl
  become: true
  hosts: all
  gather_facts: false
  vars:
    snap_channel: latest/stable
    snap_packages:
      - helm
      - kubectl
      - microk8s
  tasks:
    - name: Install
      community.general.snap:
        classic: true
        channel: "{{ snap_channel }}"
        name: "{{ item }}"
      loop: "{{ snap_packages }}"

- name: Preparing User
  become: true
  hosts: all
  gather_facts: false
  vars:
    microk8s_user: azureuser
  tasks:
    - name: Add user to microk8s group
      ansible.builtin.user:
        name: "{{ microk8s_user }}"
        groups: microk8s
        append: true
    - name: Reset connection
      ansible.builtin.meta: reset_connection

- name: Change kube folder ownership
  become: true
  hosts: all
  gather_facts: false
  vars:
    microk8s_user: azureuser
  tasks:
    - name: Change ownership
      ansible.builtin.file:
        path: /home/{{ microk8s_user }}/.kube
        owner: "{{ microk8s_user }}"
        group: "{{ microk8s_user }}"
        state: directory
        mode: "0700"

- name: Enable microk8s common modules
  become: true
  hosts: all
  gather_facts: false
  vars:
    microk8s_modules:
      - cert-manager
      - dns
      - helm
      - hostpath-storage
      - ingress
      - metallb 10.0.0.0/27
      - observability
  tasks:
    - name: Enable module
      ansible.builtin.command: microk8s enable {{ item }}
      loop: "{{ microk8s_modules }}"
      changed_when: false

- name: Create local kubeconfig
  become: true
  hosts: all
  gather_facts: true
  vars:
    microk8s_user: azureuser
  tasks:
    - name: Run microk8s config command
      ansible.builtin.command: microk8s config
      register: microk8s_config_output
      changed_when: false
    - name: Write microk8s config to kubeconfig file (current user)
      ansible.builtin.copy:
        content: "{{ microk8s_config_output.stdout }}"
        dest: "{{ ansible_user_dir }}/.kube/config"
        owner: "{{ ansible_user_id  }}"
        group: "{{ ansible_user_id  }}"
        mode: "0600"
    - name: Write microk8s config to kubeconfig file (mircok8s user)
      ansible.builtin.copy:
        content: "{{ microk8s_config_output.stdout }}"
        dest: /home/{{ microk8s_user }}/.kube/config
        owner: "{{ microk8s_user  }}"
        group: "{{ microk8s_user  }}"
        mode: "0600"

- name: Install Package Dependencies
  become: true
  hosts: all
  gather_facts: false
  tasks:
    - name: Install python3-pip
      ansible.builtin.apt:
        name: python3-pip
        update_cache: true

- name: Install pip Dependencies
  become: true
  hosts: all
  gather_facts: false
  vars:
    pip_install_packages:
      - name: helm-python
      - name: kubernetes
      - name: PyYAML
      - name: jsonpatch
  roles:
    - geerlingguy.pip

- name: Deploy Github Runner
  become: false
  hosts: all
  gather_facts: true
  vars:
    default_helm_charts:
      actions-runner-controller:
        chart_ref: "oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller"
        chart_version: 0.9.3
        release_namespace: actions-runner-controller
        helm_values: {}
      k8s-for-small-teams:
        chart_ref: "oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set"
        chart_version: 0.9.3
        release_name: k8s-for-small-teams
        release_namespace: actions-runner
        helm_values:
          runnerScaleSetName: k8s-for-small-teams
          minRunners: 3
          maxRunners: 10
          githubConfigUrl: "https://github.com/m4s-b3n/k8s-for-small-teams"
          containerMode:
            type: "kubernetes"
            kubernetesModeWorkVolumeClaim:
              accessModes: ["ReadWriteOnce"]
              storageClassName: "microk8s-hostpath"
              resources:
                requests:
                  storage: 100M
    additional_helm_charts: {}
  tasks:
    - name: Deploy Helm Charts
      kubernetes.core.helm:
        release_name: "{{ item.key }}"
        chart_ref: "{{ item.value.chart_ref }}"
        chart_version: "{{ item.value.chart_version }}"
        release_namespace: "{{ item.value.release_namespace }}"
        create_namespace: true
        state: present
        atomic: true
        values: "{{ item.value.helm_values }}"
      loop: "{{ default_helm_charts | ansible.builtin.combine(additional_helm_charts, recursive=True, list_merge='append_rp') | dict2items }}"
